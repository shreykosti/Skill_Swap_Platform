// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String  
  username  String  @unique 
  location  String  
  bio       String  @db.Text
  public    Boolean @default(true)
  avaTime   String  @default("anytime")
  averageRating Float? @default(0)
  linkedIn  String? @default("")
  github    String? @default("")
  twitter   String? @default("")
  website   String? @default("")
  
  // --- Relationships ---
  skills UserSkill[]
  sentSwaps       SwapRequest[] @relation("SentSwaps")
  receivedSwaps   SwapRequest[] @relation("ReceivedSwaps")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Skill {
  id        String   @id @default(cuid())
  name        String   @unique 
  category    String?  @default("tech")
  users UserSkill[]
}

//join
model UserSkill {
  id          String    @id @default(cuid()) 
  userId  String
  skillId String
  type    SkillType 
  level   SkillLevel
  description String     @db.Text 
  // --- Relationships ---
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)

   swapRequests SwapRequestSkill[]
 @@unique([userId, skillId, type])

}

model SwapRequest {
  id                String      @id @default(cuid())
  requesterId       String
  responderId       String
  message           String?     @db.Text
  status            SwapStatus  @default(PENDING)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  requester         User        @relation("SentSwaps", fields: [requesterId], references: [id], onDelete: Cascade)
  responder         User        @relation("ReceivedSwaps", fields: [responderId], references: [id], onDelete: Cascade)
  // A swap request is now composed of a list of skills
  skills            SwapRequestSkill[]
  @@unique([requesterId, responderId])
}

//join
model SwapRequestSkill {
  id              String          @id @default(cuid())
  swapRequestId   String
  userSkillId     String
  type            SkillType   // Is this skill OFFERED or WANTED in this swap?

  swapRequest     SwapRequest     @relation(fields: [swapRequestId], references: [id], onDelete: Cascade)
  userSkill       UserSkill       @relation(fields: [userSkillId], references: [id], onDelete: Cascade)

  @@unique([swapRequestId, userSkillId]) // Prevents adding the same skill to the same swap twice
  createdAt DateTime @default(now())
}

enum SkillType {
  OFFERED
  WANTED
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}
enum SwapStatus {
  PENDING
  ACCEPTED
  DECLINED
  COMPLETED
  CANCELLED
}
